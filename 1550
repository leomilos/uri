#include<iostream>
#include<vector>
#include<queue>
#include <cstdlib>

using namespace std;
int B;

vector< vector<int> > g; // Lista de Adjacência

// Algoritmo calcula a menor distancia para alcançar todos os vertices do grafo partindo de um vertice inicial.
int bfs(int inicio){
	//para os 3 vetores a seguir, cada posição do vetor representa um vertice do grafo.
    vector<int> d(g.size(), -1); // Vetor de distância minima para alcançar o vertice.
    vector<int> p(g.size(), -1); // Vetor que armazena o pai de cada vertice.
    vector<bool> cor(g.size(), false); // Define se cada vertice ja foi encontrado ou não.
    
	queue<int> Q; // Fila que define a ordem de acesso aos vertices.
	
	// Inicialização
    cor[inicio] = true; // Define a cor do vértice raiz como acessado.
    d[inicio] = 0; // Define a distância da raiz para ela mesma como 0.
    g[inicio].push_back(inicio+1);
    int n=inicio, reversedNumber = 0, remainder;
    while(n != 0){
        remainder = n%10;
        reversedNumber = reversedNumber*10 + remainder;
        n /= 10;
    }
    g[inicio].push_back(reversedNumber);
    Q.push(inicio); // Enfileira a raiz.

    // Enquanto a fila não estiver vazia.
    while(!Q.empty()){
        int u = Q.front(); // Define u como sendo o vértice na frente na fila.
        Q.pop(); // Desenfileira.
		//cout<<"vertice atual: "<<u<<endl;
		    g[u].push_back(u+1);
          int n=u, reversedNumber = 0, remainder;
          while(n != 0){
              remainder = n%10;
              reversedNumber = reversedNumber*10 + remainder;
              n /= 10;
          }
    g[u].push_back(reversedNumber);
        // Para todo vertice adjacente à "u".
        for(int i = 0; i < g[u].size(); i++){
            // Se o vertice adjacente à "u" não tiver sido encontrado.
			if(cor[g[u][i]] == false){
				//cout<<g[u][i]<<endl;
                Q.push(g[u][i]); // Enfileira o vertice adjacente.
                cor[g[u][i]] = true; // Define o vertice adjacente como encontrado.
                d[g[u][i]] = d[u]+1; // Define a distancia minima para alcançar o vertice.
                p[g[u][i]] = u; // Define o pai do vertice adjacente como "u".
                if(g[u][i]==B){
                  return d[u]+1;
                }
            }
        }
        //cout<<endl;
    }
    
    // *** OBS: O RETORNO DA FUNÇÃO PODE SER ALTERADO CONFORME A NECESSIDADE DO PROBLEMA. ***
    //return d; // Retorna o vetor peso.
}

int main(){
	int n,i;
	cin>>n;
	for(i=0;i<n;i++){
	  g.resize(100000);
	  int A;
	  cin>>A>>B;
	  if(A==B){
	    cout<<"0"<<endl;
	    continue;
	  }
	  int dist = bfs(A);
	  cout<<dist<<endl;
	  g.clear();
	}
	system("pause");
  return 0;
}
